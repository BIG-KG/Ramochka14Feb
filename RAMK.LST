Turbo Assembler	 Version 4.1	    02/13/25 05:19:43	    Page 1
ramk.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     .186
      4				     org 100h
      5
      6
      7	0100			     .data
      8	0000  0000		     StringStart dw 0
      9	0002  0000		     StringSize	 dw 0
     10	0004  0000		     RamkStyle	 dw 0
     11	0006  33 20 33 20 74 65	73+  testSIGN: db '3 3 testsign$ 1 '
     12	      74 73 69 67 6E 24	20+
     13	      31 20
     14
     15	0016  DA C4 BF B3 00 B3	C0+  oneLine	 db 218, 196, 191, 179,	0, 179,	192, 191, 217
     16	      BF D9
     17
     18	001F  0000 0016r	     modesArray	dw 0, offset oneLine
     19	0023			     .code
     20
     21	0100			     main:
     22					     ;mov ax, 4
     23					     ;mov bx, 5
     24					     ;mov cx, 8
     25					     ;mov dx, 9
     26					     ;mov di, offset oneLine
     27					     ;call Drawline
     28
     29					     ;mov ax, 4c00h
     30					     ;int 21h
     31
     32	0100  BD 0000			     mov bp, 0
     33	0103  E8 00A2			     call getarg
     34	0106  E8 0007			     call calculateRamckSize
     35	0109  E8 0015			     call calculateRamckStyle
     36	010C  E8 0026			     call draw_ramk
     37	010F  C3			     ret
     38
     39				     ; ax - xleft
     40				     ; bx - yleft
     41				     ; cx - xleft
     42				     ; dx - yleft
     43				     ; di - sourese of mode
     44	0110			     calculateRamckSize:
     45	0110  8B 0E 0002r		     mov cx, StringSize
     46	0114  83 C1 08			     add cx, 8
     47	0117  03 C8			     add cx, ax
     48
     49	0119  33 D2			     xor dx, dx
     50	011B  03 D3			     add dx, bx
     51	011D  83 C2 10			     add dx, 16
     52
     53	0120  C3			     ret
     54
     55
     56	0121			     calculateRamckStyle:
     57	0121  52			     push dx
Turbo Assembler	 Version 4.1	    02/13/25 05:19:43	    Page 2
ramk.asm



     58	0122  8B 16 0004r		     mov dx, RamkStyle
     59	0126  83 E2 07			     and dx, 111b
     60	0129  6B D2 02			     imul dx, 2
     61	012C  BF 001Fr			     mov di, offset modesArray
     62	012F  03 FA			     add     di, dx
     63	0131  8B 3D			     mov di, [di]
     64	0133  5A			     pop dx
     65	0134  C3			     ret
     66
     67
     68
     69	0135			     draw_ramk:
     70	0135  53			     push bx; start draw window
     71
     72	0136  53			     push bx
     73	0137  52			     push dx
     74	0138  51			     push cx
     75	0139  E8 0039			     call Drawline
     76	013C  59			     pop  cx
     77	013D  5A			     pop  dx
     78	013E  5B			     pop  bx
     79
     80	013F  83 C7 03			     add di, 3
     81	0142  EB 0A 90			     jmp checkLineNum
     82
     83	0145				 drawCurrLine:
     84	0145  52			     push dx
     85	0146  51			     push cx
     86	0147  53			     push bx
     87	0148  E8 002A			     call Drawline
     88	014B  5B			     pop  bx
     89	014C  59			     pop  cx
     90	014D  5A			     pop  dx
     91
     92	014E				 checkLineNum:
     93	014E  43			     inc bx
     94
     95	014F  3B DA			     cmp bx, dx
     96	0151  7C F2			     jl	drawCurrLine
     97
     98	0153  83 C7 03			     add di, 3
     99	0156  52			     push dx
    100	0157  51			     push cx
    101	0158  53			     push bx
    102	0159  E8 0019			     call Drawline
    103	015C  5B			     pop  bx
    104	015D  59			     pop  cx
    105	015E  5A			     pop  dx
    106
    107	015F  5B			     pop bx
    108
    109	0160  B8 4C00			     mov ax, 4c00h
    110	0163  CD 21			     int 21h
    111
    112	0165  C3			     ret
    113
    114
Turbo Assembler	 Version 4.1	    02/13/25 05:19:43	    Page 3
ramk.asm



    115
    116
    117	0166			     wrightSign:
    118	0166  03 DA			     add bx, dx
    119	0168  D1 EB			     shr bx, 1
    120	016A  05 0004			     add ax, 4
    121	016D  6B DB 50			     imul bx, 80
    122	0170  03 D8			     add bx, ax
    123	0172  D1 E3			     shl bx, 1
    124
    125
    126
    127	0174  C3			     ret
    128
    129
    130
    131				     ;===========================================
    132				     ;
    133				     ;
    134				     ;	Entery:	AX - oX, BX - oY, Bi - frameData
    135				     ;	Exit  :	None
    136				     ;	Destr :	AX, BX,	CX, DX,	ES
    137				     ;===========================================
    138	0175			     .data
    139	0023  48 69 20 67 75 79	73+  letter	db 'Hi guys!'
    140	      21
    141
    142	002B			     .code
    143				     ; destr - dx, cx, bx
    144	0175			     Drawline proc
    145
    146	0175  BA B800			     mov dx, 0b800h; di	- symbol sourse
    147	0178  8E C2			     mov es, dx
    148	017A  8B D3			     mov dx, bx
    149	017C  6B DB 50			     imul bx, 80;bx - current copyng symbol
    150	017F  03 D8			     add bx, ax
    151	0181  6B DB 02			     imul bx, 2
    152
    153	0184  6B D2 50			     imul dx, 80; dx - max copying symbol
    154	0187  03 D1			     add dx, cx
    155	0189  6B D2 02			     imul dx, 2
    156
    157	018C  8A 0D			     mov cl, [di]
    158	018E  26: 88 0F			     mov es:[bx], cl
    159
    160	0191  8A 4D 01			     mov cl, [di + 1]
    161	0194  EB 04 90			     jmp Check
    162
    163	0197				 Do:
    164	0197  26: 88 0F			     mov es:[bx], cl
    165
    166	019A				 Check:
    167	019A  83 C3 02			     add bx, 2
    168	019D  3B D3			     cmp dx, bx
    169	019F  7F F6			     jg	Do
    170
    171	01A1  8A 4D 02			     mov cl, [di + 2]
Turbo Assembler	 Version 4.1	    02/13/25 05:19:43	    Page 4
ramk.asm



    172	01A4  26: 88 0F			     mov es:[bx], cl
    173
    174
    175
    176	01A7  C3			     ret
    177
    178	01A8				     endp
    179
    180
    181
    182				     ; bx - current simb, dx - current arg
    183	01A8			     getarg:
    184	01A8  BB 0006r			 mov bx, offset	testSIGN
    185	01AB  E8 0066			 call skip_space
    186	01AE  E8 0047			     call get_num
    187	01B1  8B F0			     mov si, ax;xcoord
    188
    189	01B3  E8 005E			     call skip_space
    190	01B6  E8 003F			     call get_num
    191	01B9  8B F8			     mov di, ax; yCoord
    192
    193	01BB  E8 0056			     call skip_space
    194	01BE  89 1E 0000r		     mov StringStart, bx
    195	01C2  E8 001D			     call skip_string
    196
    197	01C5  E8 004C			     call skip_space
    198	01C8  E8 002D			     call get_num
    199	01CB  A3 0004r			     mov RamkStyle, ax
    200
    201	01CE  3C 00			     cmp al, 0
    202	01D0  75 07			     jne PresetMode
    203
    204	01D2  E8 003F			     call skip_space
    205	01D5  89 1E 001Fr		     mov modesArray, bx
    206
    207	01D9				     PresetMode:
    208	01D9  8B C6			     mov ax, si
    209	01DB  8B DF			     mov bx, di
    210	01DD  32 E4			     xor ah, ah
    211	01DF  32 FF			     xor bh, bh
    212	01E1  C3			     ret
    213
    214				     ;INPUT: SI	- sourse of
    215
    216
    217
    218				     ;DESTRT - CX, DX, BX
    219	01E2			     skip_string:
    220	01E2  33 C9			     xor cx, cx
    221	01E4  B9 0024			     mov cx, '$'
    222	01E7  33 D2			     xor dx, dx
    223	01E9  EB 03 90			     jmp isEndOfString
    224
    225	01EC				     skipSymb:
    226	01EC  43			     inc bx
    227	01ED  42			     inc dx
    228
Turbo Assembler	 Version 4.1	    02/13/25 05:19:43	    Page 5
ramk.asm



    229	01EE				     isEndOfString:
    230	01EE  38 0F			     cmp [bx], cl
    231	01F0  75 FA			     jne skipSymb
    232
    233	01F2  43			     inc bx
    234	01F3  89 16 0002r		     mov StringSize, dx
    235
    236	01F7  C3			     ret
    237
    238				     ; DESTRT -	AX, CX
    239	01F8			     get_num:
    240	01F8  32 C0			     xor al, al
    241	01FA  33 D2			     xor dx, dx
    242	01FC  BD 0020			     mov bp, ' '
    243
    244	01FF				     addToNum:
    245	01FF  6B C0 0A			     imul ax, 10
    246	0202  8B 0F			     mov cx, [bx]
    247	0204  83 E9 30			     sub cx, '0'
    248	0207  02 C1			     add al, cl
    249	0209  43			     inc bx
    250	020A  42			     inc dx
    251
    252	020B				     isPartOfNum:
    253	020B  33 C9			     xor cx, cx
    254	020D  8A 0F			     mov cl, [bx]
    255	020F  3B E9			     cmp bp, cx
    256	0211  75 EC			     jne addToNum
    257
    258	0213  C3			     ret
    259
    260	0214			     skip_space:
    261	0214  50			     push ax
    262	0215  B0 20			     mov al, ' '
    263	0217  EB 02 90			     jmp IsspaseTEst
    264	021A				     startSkip:
    265	021A  43			     inc bx
    266	021B				     IsspaseTEst:
    267	021B  3A 07			     cmp al, [bx]
    268	021D  74 FB			     je	startSkip
    269	021F  58			     pop ax
    270	0220  C3			     ret
    271
    272				     end main
Turbo Assembler	 Version 4.1	    02/13/25 05:19:43	    Page 6
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/13/25"
??FILENAME			  Text	 "ramk	  "
??TIME				  Text	 "05:19:43"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0103H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 RAMK
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ADDTONUM			  Near	 DGROUP:01FF
CALCULATERAMCKSIZE		  Near	 DGROUP:0110
CALCULATERAMCKSTYLE		  Near	 DGROUP:0121
CHECK				  Near	 DGROUP:019A
CHECKLINENUM			  Near	 DGROUP:014E
DO				  Near	 DGROUP:0197
DRAWCURRLINE			  Near	 DGROUP:0145
DRAWLINE			  Near	 DGROUP:0175
DRAW_RAMK			  Near	 DGROUP:0135
GETARG				  Near	 DGROUP:01A8
GET_NUM				  Near	 DGROUP:01F8
ISENDOFSTRING			  Near	 DGROUP:01EE
ISPARTOFNUM			  Near	 DGROUP:020B
ISSPASETEST			  Near	 DGROUP:021B
LETTER				  Byte	 DGROUP:0023
MAIN				  Near	 DGROUP:0100
MODESARRAY			  Word	 DGROUP:001F
ONELINE				  Byte	 DGROUP:0016
PRESETMODE			  Near	 DGROUP:01D9
RAMKSTYLE			  Word	 DGROUP:0004
SKIPSYMB			  Near	 DGROUP:01EC
SKIP_SPACE			  Near	 DGROUP:0214
SKIP_STRING			  Near	 DGROUP:01E2
STARTSKIP			  Near	 DGROUP:021A
STRINGSIZE			  Word	 DGROUP:0002
STRINGSTART			  Word	 DGROUP:0000
TESTSIGN			  Near	 DGROUP:0006
WRIGHTSIGN			  Near	 DGROUP:0166

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  002B Word	  Public  DATA
  _TEXT				  16  0221 Word	  Public  CODE
